import os
import json
import requests
import gspread
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, filters
)
from google.oauth2.service_account import Credentials

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
MAKE_WEBHOOK_URL = os.getenv("MAKE_WEBHOOK_URL")
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1CPRIxtXQ_2IMVsSesMoHYuBTmjnEWDC8R6mR4BAhvEk/edit"
SHEET_NAME = "–õ–∏—Å—Ç1"
ITEMS_PER_PAGE = 5

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASK_QUANTITY, ASK_NAME, ASK_PHONE = range(3)
user_state = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ Google Sheets
def load_catalog():
    creds_info = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON"))
    creds = Credentials.from_service_account_info(creds_info, scopes=["https://www.googleapis.com/auth/spreadsheets.readonly"])
    client = gspread.authorize(creds)
    sheet = client.open_by_url(SPREADSHEET_URL).worksheet(SHEET_NAME)
    data = sheet.col_values(1)
    return [row.strip() for row in data if row.strip()][1:]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = 0
    catalog = load_catalog()
    page = catalog[:ITEMS_PER_PAGE]
    message = "\n".join([f"{i+1}. {item}" for i, item in enumerate(page)])
    await update.message.reply_text(
        f"üåπ –ö–∞—Ç–∞–ª–æ–≥ —Ä–æ–∑ (1‚Äì{ITEMS_PER_PAGE}):\n{message}\n\n–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ /more"
    )
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /more
async def more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    catalog = load_catalog()
    current_page = user_state.get(user_id, 0) + 1
    start_index = current_page * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    page = catalog[start_index:end_index]
    if not page:
        await update.message.reply_text("üì¶ –≠—Ç–æ –±—ã–ª –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.")
        return
    user_state[user_id] = current_page
    message = "\n".join([f"{i+1+start_index}. {item}" for i, item in enumerate(page)])
    await update.message.reply_text(
        f"üåπ –ö–∞—Ç–∞–ª–æ–≥ (–ø–æ–∑. {start_index+1}‚Äì{min(end_index, len(catalog))}):\n{message}\n\n–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∞ –∏–ª–∏ /more"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ä—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    product = update.message.text.strip()
    catalog = load_catalog()
    if product not in catalog:
        await update.message.reply_text("‚ùå –¢–∞–∫–æ–≥–æ —Å–æ—Ä—Ç–∞ –Ω–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    context.user_data["product"] = product
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫?")
    return ASK_QUANTITY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
async def handle_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        quantity = int(update.message.text.strip())
        context.user_data["quantity"] = quantity
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚Äî —Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫?")
        return ASK_QUANTITY
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return ASK_NAME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return ASK_PHONE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text.strip()
    product = context.user_data.get("product")
    quantity = context.user_data.get("quantity")
    name = context.user_data.get("name")
    phone = context.user_data.get("phone")
    total = 30000 * quantity
    commission = int(total * 0.10)

    payload = {
        "product": product,
        "quantity": quantity,
        "name": name,
        "phone": phone,
        "total": total,
        "commission": commission
    }

    try:
        requests.post(MAKE_WEBHOOK_URL, json=payload)
    except Exception as e:
        print("Webhook error:", e)

    await update.message.reply_text(
        f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n–°–æ—Ä—Ç: {product}\n–ö–æ–ª-–≤–æ: {quantity}\n–°—É–º–º–∞: {total} —Å—É–º\n–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä."
    )
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()
 conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)],
        states={
            ASK_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quantity)],
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name)],
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone)],
        },
        fallbacks=[],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("more", more))
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
